#!/bin/bash

sendData () {
    TYPE=$1
    DATA=$2
    echo -n "${DATA}" | curl -s -k -X POST --data-binary "@-" "$ENDPOINT?type=$TYPE&uuid=$UUID"
}

PATH="/opt/puppetlabs/bin:/opt/puppetlabs/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
SERVER="https://syshelper.invokable.gmbh"
ENDPOINT=$SERVER"/data-sink/host"
UUID=$(dmidecode -t 1 | grep ID | sed 's/.*UUID://;s/ //g')
if [ $UUID == "NotSettable" ]; then
  UUID=$(cat /var/lib/dbus/machine-id 2>/dev/null)
fi
if [ $UUID == "NotPresent" ]; then
  UUID=$(cat /var/lib/dbus/machine-id 2>/dev/null)
fi
if [ -z $UUID ]; then
  UUID=$(cat /tmp/j77_uuid 2>/dev/null)
fi
if [ $? -ne 0 ]; then
  cat /proc/sys/kernel/random/uuid > /tmp/j77_uuid
  UUID=$(cat /tmp/j77_uuid)
fi


VERSION=1.0.5.8
sendData "VERSION" "$VERSION"

echo "Sammle Daten zu laufenden Prozessen."
PS=$(ps aux)
sendData "PS" "$PS"

echo "Sammle Daten zum Netzwerk."
HOSTNAME=$(hostname)
sendData "HOSTNAME" "$HOSTNAME"

FQDN=$(hostname --fqdn 2>/dev/null || hostname)
sendData "FQDN" "$FQDN"
ip -o addr >/dev/null 2>&1
if [[ $? == 0 ]]; then IP_INFOS=$(ip -o addr 2>/dev/null | awk '!/^[0-9]*: ?lo|link\/ether|link\/void/ {print $2" "$4}' 2>/dev/null);
else IP_INFOS=$(for Iface in $(ifconfig | grep -Ev "LOOPBACK|VOID"| cut -d":" -f1 | grep -E "^[a-z0-9]"); do for IP in $(ifconfig $Iface 2>/dev/null | grep -v "ether" | awk '{print $2}' | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}|([a-f0-9:]+:+)+[a-f0-9]+"); do echo $Iface $IP; done; done); fi
sendData "IP_INFOS" "$IP_INFOS"
IP_V4_EXT=$(curl -k https://v4-connecttest.bbbserver.de/get-ip 2>/dev/null)
sendData "IP_V4_EXT" "$IP_V4_EXT"
IP_V6_EXT=$(curl -k https://v6-connecttest.bbbserver.de/get-ip 2>/dev/null)
sendData "IP_V6_EXT" "$IP_V6_EXT"
RESOLVE=$(cat /etc/resolv.conf)
sendData "RESOLVE" "$RESOLVE"
NETSTAT=$(netstat -tulpn 2>/dev/null)
sendData "NETSTAT" "$NETSTAT"

echo "Sammle Daten zu Puppet."
PUPPET_VERSION=$(puppet agent --version 2>/dev/null)
if [[ $? == 0 ]]; then PUPPET_LASTLOG=$(cat /opt/puppetlabs/puppet/cache/state/last_run_report.yaml); fi
sendData "PUPPET_VERSION" "$PUPPET_VERSION"
sendData "PUPPET_LASTLOG" "$PUPPET_LASTLOG"

echo "Sammle Daten zu: Webserver."
APACHE_STATUS="NULL"
APACHE_VERSION=$(apache2 -v 2>/dev/null)
if [[ $? == 0 ]]; then APACHE_STATUS=$(apachectl -S); fi
sendData "APACHE_VERSION" "$APACHE_VERSION"
sendData "APACHE_STATUS" "$APACHE_STATUS"
NGINX_STATUS="NULL"
NGINX_VERSION=$(nginx -v 2>&1)
if [[ $? == 0 ]]; then NGINX_STATUS=$(nginx -T); fi
sendData "NGINX_VERSION" "$NGINX_VERSION"
sendData "NGINX_STATUS" "$NGINX_STATUS"

echo "Sammle Daten zu den Specs."
CPU=$(cat /proc/cpuinfo 2>/dev/null)
sendData "CPU" "$CPU"
RAM=$(cat /proc/meminfo 2>/dev/null)
sendData "RAM" "$RAM"
DF=$(df)
sendData "DF" "$DF"
UPTIME=$(uptime)
sendData "UPTIME" "$UPTIME"

echo "Sammle Daten zur Distro."
OS=$(cat /etc/os-release 2>/dev/null)
if [[ -f /etc/debian_version ]]; then
    DEBIAN_VERSION=$(cat /etc/debian_version 2>/dev/null)
    OS=$(echo -e "${OS}\nDEBIAN_VERSION=\"${DEBIAN_VERSION}\"")
fi
sendData "OS" "$OS"
KERNEL=$(uname -a)
sendData "KERNEL" "$KERNEL"

echo "Sammle Daten zu APT."
MIRRORS=$(cat /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null)
sendData "MIRRORS" "$MIRRORS"
APT_ERROR=$(apt-get update -y 2>/dev/null 1>&2; echo $? 2>/dev/null)
sendData "APT_ERROR" "$APT_ERROR"
APT_UPGRADABLE=$(apt-get --dry-run -V upgrade --assume-no 2>/dev/null)
sendData "APT_UPGRADABLE" "$APT_UPGRADABLE"
DPKG=$(dpkg-query -W -f='${binary:Package};${Version};${db:Status-Status};${db:Status-Want};${db:Status-Eflag}\n' 2>/dev/null)
sendData "DPKG" "$DPKG"

echo "Sammle Daten zu authorized_keys aller user."
# Iterate over all users and get their authorized_keys
AUTHORIZED_KEYS=""
USERHOMEDIRS=$(cat /etc/passwd | cut -d":" -f1,6);
KEYFILES=$(cat /etc/ssh/sshd_config | grep -e "^AuthorizedKeysFile" | sed -E "s#[[:space:]]+# #g" | cut -d" " -f2- | sed "s# #\n#g");
for userhomedir in ${USERHOMEDIRS}; do
  user=$(echo ${userhomedir} | cut -d: -f1)
  homedir=$(echo ${userhomedir} | cut -d: -f2)
  for keyfile in .ssh/authorized_keys ${KEYFILES}; do
    if [ -f ${homedir}/${keyfile} ]; then
      while IFS= read -r line; do
        # if line does not start with a comment
        if [[ ! $line =~ ^# ]]; then
          AUTHORIZED_KEYS="${AUTHORIZED_KEYS}${user}|${line}\n"
        fi
      done < ${homedir}/${keyfile}
    fi
  done
done
sendData "AUTHORIZED_KEYS" "$AUTHORIZED_KEYS"

echo "Sammle SSH-Logins der letzten 24 Stunden"
SSH_LOGINS=""
if command -v journalctl &> /dev/null; then
    SSH_LOGINS=$(journalctl --grep "Accepted publickey" -o short-iso --no-pager --since="-96 hours")
    SSH_LOGINS="JOURNALCTL|||${SSH_LOGINS}"
else
    if [[ -f /var/log/auth.log ]]; then
        SSH_LOGINS=$(grep "Accepted publickey" /var/log/auth.log)
        SSH_LOGINS="VARLOGAUTHLOG|||${SSH_LOGINS}"
    elif [[ -f /var/log/secure ]]; then
        SSH_LOGINS=$(grep "Accepted publickey" /var/log/secure)
        SSH_LOGINS="VARLOGSECURE|||${SSH_LOGINS}"
    else
        echo "Keine SSH-Logs gefunden."
    fi
fi
sendData "SSH_LOGINS" "$SSH_LOGINS"

echo "Sammle Daten zu ProxMox."
PROXMOX_VERSION=$(pvesh get version 2>/dev/null)
sendData "PROXMOX_VERSION" "$PROXMOX_VERSION"

echo "Sammle Daten zu Plesk."
PLESK_BACKUPS="NULL"
PLESK_BACKUP_ERR="NULL"
PLESK_VERSION=$(plesk version 2>/dev/null)
PLESK_ERROR_TIME=1
if [[ $? == 0 ]]; then
    PLESK_BACKUPS=$(find /var/log/plesk/PMM/ -maxdepth 2 -mtime -7 -name backup.log -printf '%T@ %p\n' | wc -l);
    PLESK_BACKUP_ERR=$( (find /var/log/plesk/PMM/ -maxdepth 2 -mtime -"${PLESK_ERROR_TIME}" -name backup.log -printf '%T@ %p\n' | awk '{print $2}' | xargs cat | grep -v "DEBUG" | grep " ERR"; find /var/log/plesk/PMM/ -maxdepth 2 -mtime -"${PLESK_ERROR_TIME}" -path */backup*/pmmcli.log -printf '%T@ %p\n' | awk '{print $2}' | xargs cat | grep -v "DEBUG" | grep "errcode" | grep -v ">0<") | wc -l);
fi
sendData "PLESK_VERSION" "$PLESK_VERSION"
sendData "PLESK_BACKUPS" "$PLESK_BACKUPS"
sendData "PLESK_BACKUP_ERR" "$PLESK_BACKUP_ERR"

echo "Sammle Daten zur mailq."
MAILQ=$(mailq 2>/dev/null)
sendData "MAILQ" "$MAILQ"

echo "Update Skript und exit."
status_code=$(curl -k -I -w "%{http_code}" -o /dev/null -s $SERVER/script)
if [[ ${status_code} != 200 ]]; then echo "UPDATE FAILED: 1"; exit 1; fi
hash=$(curl -k $SERVER/hash.php -s)
if [[ $(md5sum -v 2>/dev/null; echo $?) == "127" ]]; then function md5sum() { md5 "${@}"; }; fi
if [[ $(cat "/tmp/j77_remote_syshelper_send.sh" | md5sum | awk '{print $1}') != $hash ]]; then
  echo "UPDATE needed";
  script=$(curl -k $SERVER/script -s)
  if [[ $(echo "${script}" | tail -c6) != "DONE." ]]; then echo "UPDATE FAILED: 2"; exit 2; fi
  if [[ $(echo "${script}" | md5sum | awk '{print $1}') != $hash ]]; then echo "UPDATE FAILED: 3"; exit 3; fi
  echo "${script}" > /tmp/j77_remote_syshelper_send.sh && chmod +x /tmp/j77_remote_syshelper_send.sh; echo "UPDATE SUCCEED"; bash -c "${0}"; exit 0
else
  echo "Script is up to date."
fi



echo "Verwendete Befehle: [apache2, apachectl, apt-get, awk, bash, cat, curl, df, dpkg-query, echo, exit, find, hostname, ip, mailq, md5sum, netstat, nginx, plesk, puppet, pvesh, sed, uname, uptime, wc, xargs]"

echo DONE.
